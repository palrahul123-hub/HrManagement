//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';


  export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

  @Injectable()
  export class Services {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
      this.http = http;
      this.baseUrl = baseUrl ?? "https://localhost:7240/";
    }

    /**
     * @return OK
     */
    leaveAllocationAll(): Observable<LeaveAllocationListDto[]> {
      let url_ = this.baseUrl + "/api/LeaveAllocation";
      url_ = url_.replace(/[?&]$/, "");

      let options_: any = {
        observe: "response",
        responseType: "blob",
        headers: new HttpHeaders({
          "Accept": "text/plain"
        })
      };

      return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
        return this.processLeaveAllocationAll(response_);
      })).pipe(_observableCatch((response_: any) => {
        if (response_ instanceof HttpResponseBase) {
          try {
            return this.processLeaveAllocationAll(response_ as any);
          } catch (e) {
            return _observableThrow(e) as any as Observable<LeaveAllocationListDto[]>;
          }
        } else
          return _observableThrow(response_) as any as Observable<LeaveAllocationListDto[]>;
      }));
    }

    protected processLeaveAllocationAll(response: HttpResponseBase): Observable<LeaveAllocationListDto[]> {
      const status = response.status;
      const responseBlob =
        response instanceof HttpResponse ? response.body :
          (response as any).error instanceof Blob ? (response as any).error : undefined;

      let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
      if (status === 200) {
        return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
          if (Array.isArray(resultData200)) {
            result200 = [] as any;
            for (let item of resultData200)
              result200.push(LeaveAllocationListDto.fromJS(item));
          }
          else {
            result200 = <any>null;
          }
          return _observableOf(result200);
        }));
      } else if (status !== 200 && status !== 204) {
        return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }));
      }
      return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    leaveAllocationPOST(body?: CreateLeaveAllocationDto | undefined): Observable<void> {
      let url_ = this.baseUrl + "/api/LeaveAllocation";
      url_ = url_.replace(/[?&]$/, "");

      const content_ = JSON.stringify(body);

      let options_: any = {
        body: content_,
        observe: "response",
        responseType: "blob",
        headers: new HttpHeaders({
          "Content-Type": "application/json",
        })
      };

      return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
        return this.processLeaveAllocationPOST(response_);
      })).pipe(_observableCatch((response_: any) => {
        if (response_ instanceof HttpResponseBase) {
          try {
            return this.processLeaveAllocationPOST(response_ as any);
          } catch (e) {
            return _observableThrow(e) as any as Observable<void>;
          }
        } else
          return _observableThrow(response_) as any as Observable<void>;
      }));
    }

    protected processLeaveAllocationPOST(response: HttpResponseBase): Observable<void> {
      const status = response.status;
      const responseBlob =
        response instanceof HttpResponse ? response.body :
          (response as any).error instanceof Blob ? (response as any).error : undefined;

      let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
      if (status === 200) {
        return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
          return _observableOf(null as any);
        }));
      } else if (status !== 200 && status !== 204) {
        return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }));
      }
      return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    leaveAllocationPUT(body?: UpdateLeaveAllocationDto | undefined): Observable<void> {
      let url_ = this.baseUrl + "/api/LeaveAllocation";
      url_ = url_.replace(/[?&]$/, "");

      const content_ = JSON.stringify(body);

      let options_: any = {
        body: content_,
        observe: "response",
        responseType: "blob",
        headers: new HttpHeaders({
          "Content-Type": "application/json",
        })
      };

      return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_: any) => {
        return this.processLeaveAllocationPUT(response_);
      })).pipe(_observableCatch((response_: any) => {
        if (response_ instanceof HttpResponseBase) {
          try {
            return this.processLeaveAllocationPUT(response_ as any);
          } catch (e) {
            return _observableThrow(e) as any as Observable<void>;
          }
        } else
          return _observableThrow(response_) as any as Observable<void>;
      }));
    }

    protected processLeaveAllocationPUT(response: HttpResponseBase): Observable<void> {
      const status = response.status;
      const responseBlob =
        response instanceof HttpResponse ? response.body :
          (response as any).error instanceof Blob ? (response as any).error : undefined;

      let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
      if (status === 200) {
        return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
          return _observableOf(null as any);
        }));
      } else if (status !== 200 && status !== 204) {
        return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }));
      }
      return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    leaveAllocationGET(id: number): Observable<LeaveAllocationDto> {
      let url_ = this.baseUrl + "/api/LeaveAllocation/{id}";
      if (id === undefined || id === null)
        throw new Error("The parameter 'id' must be defined.");
      url_ = url_.replace("{id}", encodeURIComponent("" + id));
      url_ = url_.replace(/[?&]$/, "");

      let options_: any = {
        observe: "response",
        responseType: "blob",
        headers: new HttpHeaders({
          "Accept": "text/plain"
        })
      };

      return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
        return this.processLeaveAllocationGET(response_);
      })).pipe(_observableCatch((response_: any) => {
        if (response_ instanceof HttpResponseBase) {
          try {
            return this.processLeaveAllocationGET(response_ as any);
          } catch (e) {
            return _observableThrow(e) as any as Observable<LeaveAllocationDto>;
          }
        } else
          return _observableThrow(response_) as any as Observable<LeaveAllocationDto>;
      }));
    }

    protected processLeaveAllocationGET(response: HttpResponseBase): Observable<LeaveAllocationDto> {
      const status = response.status;
      const responseBlob =
        response instanceof HttpResponse ? response.body :
          (response as any).error instanceof Blob ? (response as any).error : undefined;

      let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
      if (status === 200) {
        return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = LeaveAllocationDto.fromJS(resultData200);
          return _observableOf(result200);
        }));
      } else if (status !== 200 && status !== 204) {
        return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }));
      }
      return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    leaveAllocationDELETE(id: number): Observable<void> {
      let url_ = this.baseUrl + "/api/LeaveAllocation/{id}";
      if (id === undefined || id === null)
        throw new Error("The parameter 'id' must be defined.");
      url_ = url_.replace("{id}", encodeURIComponent("" + id));
      url_ = url_.replace(/[?&]$/, "");

      let options_: any = {
        observe: "response",
        responseType: "blob",
        headers: new HttpHeaders({
        })
      };

      return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_: any) => {
        return this.processLeaveAllocationDELETE(response_);
      })).pipe(_observableCatch((response_: any) => {
        if (response_ instanceof HttpResponseBase) {
          try {
            return this.processLeaveAllocationDELETE(response_ as any);
          } catch (e) {
            return _observableThrow(e) as any as Observable<void>;
          }
        } else
          return _observableThrow(response_) as any as Observable<void>;
      }));
    }

    protected processLeaveAllocationDELETE(response: HttpResponseBase): Observable<void> {
      const status = response.status;
      const responseBlob =
        response instanceof HttpResponse ? response.body :
          (response as any).error instanceof Blob ? (response as any).error : undefined;

      let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
      if (status === 200) {
        return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
          return _observableOf(null as any);
        }));
      } else if (status !== 200 && status !== 204) {
        return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }));
      }
      return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    leaveRequestGET(): Observable<void> {
      let url_ = this.baseUrl + "/api/LeaveRequest";
      url_ = url_.replace(/[?&]$/, "");

      let options_: any = {
        observe: "response",
        responseType: "blob",
        headers: new HttpHeaders({
        })
      };

      return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
        return this.processLeaveRequestGET(response_);
      })).pipe(_observableCatch((response_: any) => {
        if (response_ instanceof HttpResponseBase) {
          try {
            return this.processLeaveRequestGET(response_ as any);
          } catch (e) {
            return _observableThrow(e) as any as Observable<void>;
          }
        } else
          return _observableThrow(response_) as any as Observable<void>;
      }));
    }

    protected processLeaveRequestGET(response: HttpResponseBase): Observable<void> {
      const status = response.status;
      const responseBlob =
        response instanceof HttpResponse ? response.body :
          (response as any).error instanceof Blob ? (response as any).error : undefined;

      let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
      if (status === 200) {
        return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
          return _observableOf(null as any);
        }));
      } else if (status !== 200 && status !== 204) {
        return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }));
      }
      return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    leaveRequestPOST(body?: CreateLeaveRequestDto | undefined): Observable<void> {
      let url_ = this.baseUrl + "/api/LeaveRequest";
      url_ = url_.replace(/[?&]$/, "");

      const content_ = JSON.stringify(body);

      let options_: any = {
        body: content_,
        observe: "response",
        responseType: "blob",
        headers: new HttpHeaders({
          "Content-Type": "application/json",
        })
      };

      return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
        return this.processLeaveRequestPOST(response_);
      })).pipe(_observableCatch((response_: any) => {
        if (response_ instanceof HttpResponseBase) {
          try {
            return this.processLeaveRequestPOST(response_ as any);
          } catch (e) {
            return _observableThrow(e) as any as Observable<void>;
          }
        } else
          return _observableThrow(response_) as any as Observable<void>;
      }));
    }

    protected processLeaveRequestPOST(response: HttpResponseBase): Observable<void> {
      const status = response.status;
      const responseBlob =
        response instanceof HttpResponse ? response.body :
          (response as any).error instanceof Blob ? (response as any).error : undefined;

      let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
      if (status === 200) {
        return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
          return _observableOf(null as any);
        }));
      } else if (status !== 200 && status !== 204) {
        return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }));
      }
      return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    leaveRequestGET2(id: number): Observable<void> {
      let url_ = this.baseUrl + "/api/LeaveRequest/{id}";
      if (id === undefined || id === null)
        throw new Error("The parameter 'id' must be defined.");
      url_ = url_.replace("{id}", encodeURIComponent("" + id));
      url_ = url_.replace(/[?&]$/, "");

      let options_: any = {
        observe: "response",
        responseType: "blob",
        headers: new HttpHeaders({
        })
      };

      return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
        return this.processLeaveRequestGET2(response_);
      })).pipe(_observableCatch((response_: any) => {
        if (response_ instanceof HttpResponseBase) {
          try {
            return this.processLeaveRequestGET2(response_ as any);
          } catch (e) {
            return _observableThrow(e) as any as Observable<void>;
          }
        } else
          return _observableThrow(response_) as any as Observable<void>;
      }));
    }

    protected processLeaveRequestGET2(response: HttpResponseBase): Observable<void> {
      const status = response.status;
      const responseBlob =
        response instanceof HttpResponse ? response.body :
          (response as any).error instanceof Blob ? (response as any).error : undefined;

      let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
      if (status === 200) {
        return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
          return _observableOf(null as any);
        }));
      } else if (status !== 200 && status !== 204) {
        return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }));
      }
      return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    leaveRequestPUT(id: number, body?: UpdateLeaveRequestDto | undefined): Observable<void> {
      let url_ = this.baseUrl + "/api/LeaveRequest/{id}";
      if (id === undefined || id === null)
        throw new Error("The parameter 'id' must be defined.");
      url_ = url_.replace("{id}", encodeURIComponent("" + id));
      url_ = url_.replace(/[?&]$/, "");

      const content_ = JSON.stringify(body);

      let options_: any = {
        body: content_,
        observe: "response",
        responseType: "blob",
        headers: new HttpHeaders({
          "Content-Type": "application/json",
        })
      };

      return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_: any) => {
        return this.processLeaveRequestPUT(response_);
      })).pipe(_observableCatch((response_: any) => {
        if (response_ instanceof HttpResponseBase) {
          try {
            return this.processLeaveRequestPUT(response_ as any);
          } catch (e) {
            return _observableThrow(e) as any as Observable<void>;
          }
        } else
          return _observableThrow(response_) as any as Observable<void>;
      }));
    }

    protected processLeaveRequestPUT(response: HttpResponseBase): Observable<void> {
      const status = response.status;
      const responseBlob =
        response instanceof HttpResponse ? response.body :
          (response as any).error instanceof Blob ? (response as any).error : undefined;

      let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
      if (status === 200) {
        return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
          return _observableOf(null as any);
        }));
      } else if (status !== 200 && status !== 204) {
        return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }));
      }
      return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    leaveRequestDELETE(id: number): Observable<void> {
      let url_ = this.baseUrl + "/api/LeaveRequest/{id}";
      if (id === undefined || id === null)
        throw new Error("The parameter 'id' must be defined.");
      url_ = url_.replace("{id}", encodeURIComponent("" + id));
      url_ = url_.replace(/[?&]$/, "");

      let options_: any = {
        observe: "response",
        responseType: "blob",
        headers: new HttpHeaders({
        })
      };

      return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_: any) => {
        return this.processLeaveRequestDELETE(response_);
      })).pipe(_observableCatch((response_: any) => {
        if (response_ instanceof HttpResponseBase) {
          try {
            return this.processLeaveRequestDELETE(response_ as any);
          } catch (e) {
            return _observableThrow(e) as any as Observable<void>;
          }
        } else
          return _observableThrow(response_) as any as Observable<void>;
      }));
    }

    protected processLeaveRequestDELETE(response: HttpResponseBase): Observable<void> {
      const status = response.status;
      const responseBlob =
        response instanceof HttpResponse ? response.body :
          (response as any).error instanceof Blob ? (response as any).error : undefined;

      let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
      if (status === 200) {
        return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
          return _observableOf(null as any);
        }));
      } else if (status !== 200 && status !== 204) {
        return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }));
      }
      return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    changeApproval(id: number, body?: ChangeLeaveRequestApprovalDto | undefined): Observable<void> {
      let url_ = this.baseUrl + "/api/LeaveRequest/ChangeApproval/{id}";
      if (id === undefined || id === null)
        throw new Error("The parameter 'id' must be defined.");
      url_ = url_.replace("{id}", encodeURIComponent("" + id));
      url_ = url_.replace(/[?&]$/, "");

      const content_ = JSON.stringify(body);

      let options_: any = {
        body: content_,
        observe: "response",
        responseType: "blob",
        headers: new HttpHeaders({
          "Content-Type": "application/json",
        })
      };

      return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_: any) => {
        return this.processChangeApproval(response_);
      })).pipe(_observableCatch((response_: any) => {
        if (response_ instanceof HttpResponseBase) {
          try {
            return this.processChangeApproval(response_ as any);
          } catch (e) {
            return _observableThrow(e) as any as Observable<void>;
          }
        } else
          return _observableThrow(response_) as any as Observable<void>;
      }));
    }

    protected processChangeApproval(response: HttpResponseBase): Observable<void> {
      const status = response.status;
      const responseBlob =
        response instanceof HttpResponse ? response.body :
          (response as any).error instanceof Blob ? (response as any).error : undefined;

      let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
      if (status === 200) {
        return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
          return _observableOf(null as any);
        }));
      } else if (status !== 200 && status !== 204) {
        return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }));
      }
      return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    leaveTypeGET(): Observable<void> {
      debugger;
      let url_ = this.baseUrl + "api/LeaveType";
      url_ = url_.replace(/[?&]$/, "");

      let options_: any = {
        observe: "response",
        responseType: "blob",
        headers: new HttpHeaders({
        })
      };

      return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
        return this.processLeaveTypeGET(response_);
      })).pipe(_observableCatch((response_: any) => {
        if (response_ instanceof HttpResponseBase) {
          try {
            return this.processLeaveTypeGET(response_ as any);
          } catch (e) {
            return _observableThrow(e) as any as Observable<void>;
          }
        } else
          return _observableThrow(response_) as any as Observable<void>;
      }));
    }

    protected processLeaveTypeGET(response: HttpResponseBase): Observable<void> {
      const status = response.status;
      const responseBlob =
        response instanceof HttpResponse ? response.body :
          (response as any).error instanceof Blob ? (response as any).error : undefined;

      let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
      if (status === 200) {
        return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
          return _observableOf(null as any);
        }));
      } else if (status !== 200 && status !== 204) {
        return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }));
      }
      return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    leaveTypePOST(body?: CreateLeaveTypeDto | undefined): Observable<void> {
      let url_ = this.baseUrl + "/api/LeaveType";
      url_ = url_.replace(/[?&]$/, "");

      const content_ = JSON.stringify(body);

      let options_: any = {
        body: content_,
        observe: "response",
        responseType: "blob",
        headers: new HttpHeaders({
          "Content-Type": "application/json",
        })
      };

      return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
        return this.processLeaveTypePOST(response_);
      })).pipe(_observableCatch((response_: any) => {
        if (response_ instanceof HttpResponseBase) {
          try {
            return this.processLeaveTypePOST(response_ as any);
          } catch (e) {
            return _observableThrow(e) as any as Observable<void>;
          }
        } else
          return _observableThrow(response_) as any as Observable<void>;
      }));
    }

    protected processLeaveTypePOST(response: HttpResponseBase): Observable<void> {
      const status = response.status;
      const responseBlob =
        response instanceof HttpResponse ? response.body :
          (response as any).error instanceof Blob ? (response as any).error : undefined;

      let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
      if (status === 200) {
        return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
          return _observableOf(null as any);
        }));
      } else if (status !== 200 && status !== 204) {
        return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }));
      }
      return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    leaveTypePUT(body?: LeaveTypeDto | undefined): Observable<void> {
      let url_ = this.baseUrl + "/api/LeaveType";
      url_ = url_.replace(/[?&]$/, "");

      const content_ = JSON.stringify(body);

      let options_: any = {
        body: content_,
        observe: "response",
        responseType: "blob",
        headers: new HttpHeaders({
          "Content-Type": "application/json",
        })
      };

      return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_: any) => {
        return this.processLeaveTypePUT(response_);
      })).pipe(_observableCatch((response_: any) => {
        if (response_ instanceof HttpResponseBase) {
          try {
            return this.processLeaveTypePUT(response_ as any);
          } catch (e) {
            return _observableThrow(e) as any as Observable<void>;
          }
        } else
          return _observableThrow(response_) as any as Observable<void>;
      }));
    }

    protected processLeaveTypePUT(response: HttpResponseBase): Observable<void> {
      const status = response.status;
      const responseBlob =
        response instanceof HttpResponse ? response.body :
          (response as any).error instanceof Blob ? (response as any).error : undefined;

      let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
      if (status === 200) {
        return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
          return _observableOf(null as any);
        }));
      } else if (status !== 200 && status !== 204) {
        return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }));
      }
      return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    leaveTypeGET2(id: number): Observable<void> {
      let url_ = this.baseUrl + "/api/LeaveType/{id}";
      if (id === undefined || id === null)
        throw new Error("The parameter 'id' must be defined.");
      url_ = url_.replace("{id}", encodeURIComponent("" + id));
      url_ = url_.replace(/[?&]$/, "");

      let options_: any = {
        observe: "response",
        responseType: "blob",
        headers: new HttpHeaders({
        })
      };

      return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
        return this.processLeaveTypeGET2(response_);
      })).pipe(_observableCatch((response_: any) => {
        if (response_ instanceof HttpResponseBase) {
          try {
            return this.processLeaveTypeGET2(response_ as any);
          } catch (e) {
            return _observableThrow(e) as any as Observable<void>;
          }
        } else
          return _observableThrow(response_) as any as Observable<void>;
      }));
    }

    protected processLeaveTypeGET2(response: HttpResponseBase): Observable<void> {
      const status = response.status;
      const responseBlob =
        response instanceof HttpResponse ? response.body :
          (response as any).error instanceof Blob ? (response as any).error : undefined;

      let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
      if (status === 200) {
        return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
          return _observableOf(null as any);
        }));
      } else if (status !== 200 && status !== 204) {
        return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }));
      }
      return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    leaveTypeDELETE(id: number): Observable<void> {
      let url_ = this.baseUrl + "/api/LeaveType/{id}";
      if (id === undefined || id === null)
        throw new Error("The parameter 'id' must be defined.");
      url_ = url_.replace("{id}", encodeURIComponent("" + id));
      url_ = url_.replace(/[?&]$/, "");

      let options_: any = {
        observe: "response",
        responseType: "blob",
        headers: new HttpHeaders({
        })
      };

      return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_: any) => {
        return this.processLeaveTypeDELETE(response_);
      })).pipe(_observableCatch((response_: any) => {
        if (response_ instanceof HttpResponseBase) {
          try {
            return this.processLeaveTypeDELETE(response_ as any);
          } catch (e) {
            return _observableThrow(e) as any as Observable<void>;
          }
        } else
          return _observableThrow(response_) as any as Observable<void>;
      }));
    }

    protected processLeaveTypeDELETE(response: HttpResponseBase): Observable<void> {
      const status = response.status;
      const responseBlob =
        response instanceof HttpResponse ? response.body :
          (response as any).error instanceof Blob ? (response as any).error : undefined;

      let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
      if (status === 200) {
        return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
          return _observableOf(null as any);
        }));
      } else if (status !== 200 && status !== 204) {
        return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }));
      }
      return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getWeatherForecast(): Observable<WeatherForecast[]> {
      let url_ = this.baseUrl + "/WeatherForecast";
      url_ = url_.replace(/[?&]$/, "");

      let options_: any = {
        observe: "response",
        responseType: "blob",
        headers: new HttpHeaders({
          "Accept": "text/plain"
        })
      };

      return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
        return this.processGetWeatherForecast(response_);
      })).pipe(_observableCatch((response_: any) => {
        if (response_ instanceof HttpResponseBase) {
          try {
            return this.processGetWeatherForecast(response_ as any);
          } catch (e) {
            return _observableThrow(e) as any as Observable<WeatherForecast[]>;
          }
        } else
          return _observableThrow(response_) as any as Observable<WeatherForecast[]>;
      }));
    }

    protected processGetWeatherForecast(response: HttpResponseBase): Observable<WeatherForecast[]> {
      const status = response.status;
      const responseBlob =
        response instanceof HttpResponse ? response.body :
          (response as any).error instanceof Blob ? (response as any).error : undefined;

      let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
      if (status === 200) {
        return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
          if (Array.isArray(resultData200)) {
            result200 = [] as any;
            for (let item of resultData200)
              result200.push(WeatherForecast.fromJS(item));
          }
          else {
            result200 = <any>null;
          }
          return _observableOf(result200);
        }));
      } else if (status !== 200 && status !== 204) {
        return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }));
      }
      return _observableOf(null as any);
    }
  }

  export class ChangeLeaveRequestApprovalDto implements IChangeLeaveRequestApprovalDto {
    id?: number;
    approved?: boolean;

    constructor(data?: IChangeLeaveRequestApprovalDto) {
      if (data) {
        for (var property in data) {
          if (data.hasOwnProperty(property))
            (<any>this)[property] = (<any>data)[property];
        }
      }
    }

    init(_data?: any) {
      if (_data) {
        this.id = _data["id"];
        this.approved = _data["approved"];
      }
    }

    static fromJS(data: any): ChangeLeaveRequestApprovalDto {
      data = typeof data === 'object' ? data : {};
      let result = new ChangeLeaveRequestApprovalDto();
      result.init(data);
      return result;
    }

    toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["id"] = this.id;
      data["approved"] = this.approved;
      return data;
    }
  }

  export interface IChangeLeaveRequestApprovalDto {
    id?: number;
    approved?: boolean;
  }

  export class CreateLeaveAllocationDto implements ICreateLeaveAllocationDto {
    numberOfDays?: number;
    leaveTypeId?: number;
    period?: number;

    constructor(data?: ICreateLeaveAllocationDto) {
      if (data) {
        for (var property in data) {
          if (data.hasOwnProperty(property))
            (<any>this)[property] = (<any>data)[property];
        }
      }
    }

    init(_data?: any) {
      if (_data) {
        this.numberOfDays = _data["numberOfDays"];
        this.leaveTypeId = _data["leaveTypeId"];
        this.period = _data["period"];
      }
    }

    static fromJS(data: any): CreateLeaveAllocationDto {
      data = typeof data === 'object' ? data : {};
      let result = new CreateLeaveAllocationDto();
      result.init(data);
      return result;
    }

    toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["numberOfDays"] = this.numberOfDays;
      data["leaveTypeId"] = this.leaveTypeId;
      data["period"] = this.period;
      return data;
    }
  }

  export interface ICreateLeaveAllocationDto {
    numberOfDays?: number;
    leaveTypeId?: number;
    period?: number;
  }

  export class CreateLeaveRequestDto implements ICreateLeaveRequestDto {
    startDate?: Date | undefined;
    endDate?: Date | undefined;
    leaveTypeId?: number;

    constructor(data?: ICreateLeaveRequestDto) {
      if (data) {
        for (var property in data) {
          if (data.hasOwnProperty(property))
            (<any>this)[property] = (<any>data)[property];
        }
      }
    }

    init(_data?: any) {
      if (_data) {
        this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>undefined;
        this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>undefined;
        this.leaveTypeId = _data["leaveTypeId"];
      }
    }

    static fromJS(data: any): CreateLeaveRequestDto {
      data = typeof data === 'object' ? data : {};
      let result = new CreateLeaveRequestDto();
      result.init(data);
      return result;
    }

    toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
      data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
      data["leaveTypeId"] = this.leaveTypeId;
      return data;
    }
  }

  export interface ICreateLeaveRequestDto {
    startDate?: Date | undefined;
    endDate?: Date | undefined;
    leaveTypeId?: number;
  }

  export class CreateLeaveTypeDto implements ICreateLeaveTypeDto {
    name?: string | undefined;
    defaultDays?: number;

    constructor(data?: ICreateLeaveTypeDto) {
      if (data) {
        for (var property in data) {
          if (data.hasOwnProperty(property))
            (<any>this)[property] = (<any>data)[property];
        }
      }
    }

    init(_data?: any) {
      if (_data) {
        this.name = _data["name"];
        this.defaultDays = _data["defaultDays"];
      }
    }

    static fromJS(data: any): CreateLeaveTypeDto {
      data = typeof data === 'object' ? data : {};
      let result = new CreateLeaveTypeDto();
      result.init(data);
      return result;
    }

    toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["name"] = this.name;
      data["defaultDays"] = this.defaultDays;
      return data;
    }
  }

  export interface ICreateLeaveTypeDto {
    name?: string | undefined;
    defaultDays?: number;
  }

  export class LeaveAllocationDto implements ILeaveAllocationDto {
    id?: number;
    startDate?: Date;
    endDate?: Date;
    leaveType?: LeaveTypeDto;
    leaveTypeId?: number;
    dateRequested?: Date;
    requestedComments?: string | undefined;
    dateActioned?: Date;
    approved?: boolean | undefined;
    cancelled?: boolean;

    constructor(data?: ILeaveAllocationDto) {
      if (data) {
        for (var property in data) {
          if (data.hasOwnProperty(property))
            (<any>this)[property] = (<any>data)[property];
        }
      }
    }

    init(_data?: any) {
      if (_data) {
        this.id = _data["id"];
        this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>undefined;
        this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>undefined;
        this.leaveType = _data["leaveType"] ? LeaveTypeDto.fromJS(_data["leaveType"]) : <any>undefined;
        this.leaveTypeId = _data["leaveTypeId"];
        this.dateRequested = _data["dateRequested"] ? new Date(_data["dateRequested"].toString()) : <any>undefined;
        this.requestedComments = _data["requestedComments"];
        this.dateActioned = _data["dateActioned"] ? new Date(_data["dateActioned"].toString()) : <any>undefined;
        this.approved = _data["approved"];
        this.cancelled = _data["cancelled"];
      }
    }

    static fromJS(data: any): LeaveAllocationDto {
      data = typeof data === 'object' ? data : {};
      let result = new LeaveAllocationDto();
      result.init(data);
      return result;
    }

    toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["id"] = this.id;
      data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
      data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
      data["leaveType"] = this.leaveType ? this.leaveType.toJSON() : <any>undefined;
      data["leaveTypeId"] = this.leaveTypeId;
      data["dateRequested"] = this.dateRequested ? this.dateRequested.toISOString() : <any>undefined;
      data["requestedComments"] = this.requestedComments;
      data["dateActioned"] = this.dateActioned ? this.dateActioned.toISOString() : <any>undefined;
      data["approved"] = this.approved;
      data["cancelled"] = this.cancelled;
      return data;
    }
  }

  export interface ILeaveAllocationDto {
    id?: number;
    startDate?: Date;
    endDate?: Date;
    leaveType?: LeaveTypeDto;
    leaveTypeId?: number;
    dateRequested?: Date;
    requestedComments?: string | undefined;
    dateActioned?: Date;
    approved?: boolean | undefined;
    cancelled?: boolean;
  }

  export class LeaveAllocationListDto implements ILeaveAllocationListDto {
    numberOfDays?: number;
    leaveType?: LeaveTypeDto;
    leaveTypeId?: number;
    period?: number;

    constructor(data?: ILeaveAllocationListDto) {
      if (data) {
        for (var property in data) {
          if (data.hasOwnProperty(property))
            (<any>this)[property] = (<any>data)[property];
        }
      }
    }

    init(_data?: any) {
      if (_data) {
        this.numberOfDays = _data["numberOfDays"];
        this.leaveType = _data["leaveType"] ? LeaveTypeDto.fromJS(_data["leaveType"]) : <any>undefined;
        this.leaveTypeId = _data["leaveTypeId"];
        this.period = _data["period"];
      }
    }

    static fromJS(data: any): LeaveAllocationListDto {
      data = typeof data === 'object' ? data : {};
      let result = new LeaveAllocationListDto();
      result.init(data);
      return result;
    }

    toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["numberOfDays"] = this.numberOfDays;
      data["leaveType"] = this.leaveType ? this.leaveType.toJSON() : <any>undefined;
      data["leaveTypeId"] = this.leaveTypeId;
      data["period"] = this.period;
      return data;
    }
  }

  export interface ILeaveAllocationListDto {
    numberOfDays?: number;
    leaveType?: LeaveTypeDto;
    leaveTypeId?: number;
    period?: number;
  }

  export class LeaveTypeDto implements ILeaveTypeDto {
    id?: number;
    name?: string | undefined;
    defaultDays?: number;

    constructor(data?: ILeaveTypeDto) {
      if (data) {
        for (var property in data) {
          if (data.hasOwnProperty(property))
            (<any>this)[property] = (<any>data)[property];
        }
      }
    }

    init(_data?: any) {
      if (_data) {
        this.id = _data["id"];
        this.name = _data["name"];
        this.defaultDays = _data["defaultDays"];
      }
    }

    static fromJS(data: any): LeaveTypeDto {
      data = typeof data === 'object' ? data : {};
      let result = new LeaveTypeDto();
      result.init(data);
      return result;
    }

    toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["id"] = this.id;
      data["name"] = this.name;
      data["defaultDays"] = this.defaultDays;
      return data;
    }
  }

  export interface ILeaveTypeDto {
    id?: number;
    name?: string | undefined;
    defaultDays?: number;
  }

  export class UpdateLeaveAllocationDto implements IUpdateLeaveAllocationDto {
    id?: number;
    numberOfDays?: number;
    leaveTypeId?: number;
    period?: number;

    constructor(data?: IUpdateLeaveAllocationDto) {
      if (data) {
        for (var property in data) {
          if (data.hasOwnProperty(property))
            (<any>this)[property] = (<any>data)[property];
        }
      }
    }

    init(_data?: any) {
      if (_data) {
        this.id = _data["id"];
        this.numberOfDays = _data["numberOfDays"];
        this.leaveTypeId = _data["leaveTypeId"];
        this.period = _data["period"];
      }
    }

    static fromJS(data: any): UpdateLeaveAllocationDto {
      data = typeof data === 'object' ? data : {};
      let result = new UpdateLeaveAllocationDto();
      result.init(data);
      return result;
    }

    toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["id"] = this.id;
      data["numberOfDays"] = this.numberOfDays;
      data["leaveTypeId"] = this.leaveTypeId;
      data["period"] = this.period;
      return data;
    }
  }

  export interface IUpdateLeaveAllocationDto {
    id?: number;
    numberOfDays?: number;
    leaveTypeId?: number;
    period?: number;
  }

  export class UpdateLeaveRequestDto implements IUpdateLeaveRequestDto {
    id?: number;
    startDate?: Date | undefined;
    endDate?: Date | undefined;
    leaveTypeId?: number;
    requestComments?: string | undefined;
    cancelled?: boolean | undefined;

    constructor(data?: IUpdateLeaveRequestDto) {
      if (data) {
        for (var property in data) {
          if (data.hasOwnProperty(property))
            (<any>this)[property] = (<any>data)[property];
        }
      }
    }

    init(_data?: any) {
      if (_data) {
        this.id = _data["id"];
        this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>undefined;
        this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>undefined;
        this.leaveTypeId = _data["leaveTypeId"];
        this.requestComments = _data["requestComments"];
        this.cancelled = _data["cancelled"];
      }
    }

    static fromJS(data: any): UpdateLeaveRequestDto {
      data = typeof data === 'object' ? data : {};
      let result = new UpdateLeaveRequestDto();
      result.init(data);
      return result;
    }

    toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["id"] = this.id;
      data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
      data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
      data["leaveTypeId"] = this.leaveTypeId;
      data["requestComments"] = this.requestComments;
      data["cancelled"] = this.cancelled;
      return data;
    }
  }

  export interface IUpdateLeaveRequestDto {
    id?: number;
    startDate?: Date | undefined;
    endDate?: Date | undefined;
    leaveTypeId?: number;
    requestComments?: string | undefined;
    cancelled?: boolean | undefined;
  }

  export class WeatherForecast implements IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    readonly temperatureF?: number;
    summary?: string | undefined;

    constructor(data?: IWeatherForecast) {
      if (data) {
        for (var property in data) {
          if (data.hasOwnProperty(property))
            (<any>this)[property] = (<any>data)[property];
        }
      }
    }

    init(_data?: any) {
      if (_data) {
        this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
        this.temperatureC = _data["temperatureC"];
        (<any>this).temperatureF = _data["temperatureF"];
        this.summary = _data["summary"];
      }
    }

    static fromJS(data: any): WeatherForecast {
      data = typeof data === 'object' ? data : {};
      let result = new WeatherForecast();
      result.init(data);
      return result;
    }

    toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["date"] = this.date ? formatDate(this.date) : <any>undefined;
      data["temperatureC"] = this.temperatureC;
      data["temperatureF"] = this.temperatureF;
      data["summary"] = this.summary;
      return data;
    }
  }

  export interface IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;
  }

  function formatDate(d: Date) {
    return d.getFullYear() + '-' +
      (d.getMonth() < 9 ? ('0' + (d.getMonth() + 1)) : (d.getMonth() + 1)) + '-' +
      (d.getDate() < 10 ? ('0' + d.getDate()) : d.getDate());
  }

  export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
      super();

      this.message = message;
      this.status = status;
      this.response = response;
      this.headers = headers;
      this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
      return obj.isApiException === true;
    }
  }

  function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
      return _observableThrow(result);
    else
      return _observableThrow(new ApiException(message, status, response, headers, null));
  }

  function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
      if (!blob) {
        observer.next("");
        observer.complete();
      } else {
        let reader = new FileReader();
        reader.onload = event => {
          observer.next((event.target as any).result);
          observer.complete();
        };
        reader.readAsText(blob);
      }
    });
  }


